// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TopologyEntitiesBasePatternGroup topology entities base pattern group
//
// swagger:model topology.entities.BasePatternGroup
type TopologyEntitiesBasePatternGroup struct {

	// The values that make up the increment pattern
	Counter *TopologyEntitiesBasepatterngroupCounter `json:"counter,omitempty"`

	// The list values for entities.
	List []string `json:"list"`

	// The format of the pattern.
	//          This will almost always be a regular expression.
	//          It is used to determine the validity of the values being set in the child leaf nodes of the pattern.
	PatternFormat string `json:"pattern-format,omitempty"`

	// The selected pattern from the possible pattern types.
	PatternType TopologyEntitiesPatternType `json:"pattern-type,omitempty"`

	// The value of the single pattern
	SingleValue string `json:"single-value,omitempty"`

	// The length of the value in bits.
	//          It can be used to determine the overflow condition during step calculation.
	ValueLength int32 `json:"value-length,omitempty"`
}

// Validate validates this topology entities base pattern group
func (m *TopologyEntitiesBasePatternGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCounter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatternType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopologyEntitiesBasePatternGroup) validateCounter(formats strfmt.Registry) error {
	if swag.IsZero(m.Counter) { // not required
		return nil
	}

	if m.Counter != nil {
		if err := m.Counter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counter")
			}
			return err
		}
	}

	return nil
}

func (m *TopologyEntitiesBasePatternGroup) validatePatternType(formats strfmt.Registry) error {
	if swag.IsZero(m.PatternType) { // not required
		return nil
	}

	if err := m.PatternType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("pattern-type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this topology entities base pattern group based on the context it is used
func (m *TopologyEntitiesBasePatternGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCounter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePatternType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopologyEntitiesBasePatternGroup) contextValidateCounter(ctx context.Context, formats strfmt.Registry) error {

	if m.Counter != nil {
		if err := m.Counter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counter")
			}
			return err
		}
	}

	return nil
}

func (m *TopologyEntitiesBasePatternGroup) contextValidatePatternType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PatternType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("pattern-type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TopologyEntitiesBasePatternGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopologyEntitiesBasePatternGroup) UnmarshalBinary(b []byte) error {
	var res TopologyEntitiesBasePatternGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
