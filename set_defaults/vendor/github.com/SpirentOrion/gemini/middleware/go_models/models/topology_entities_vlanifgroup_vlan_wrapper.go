// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TopologyEntitiesVlanifgroupVlanWrapper topology entities vlanifgroup vlan wrapper
//
// swagger:model topology.entities.vlanifgroup.VlanWrapper
type TopologyEntitiesVlanifgroupVlanWrapper struct {

	// vlan
	Vlan *TopologyEntitiesVlanifgroupVlan `json:"vlan,omitempty"`
}

// Validate validates this topology entities vlanifgroup vlan wrapper
func (m *TopologyEntitiesVlanifgroupVlanWrapper) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopologyEntitiesVlanifgroupVlanWrapper) validateVlan(formats strfmt.Registry) error {
	if swag.IsZero(m.Vlan) { // not required
		return nil
	}

	if m.Vlan != nil {
		if err := m.Vlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this topology entities vlanifgroup vlan wrapper based on the context it is used
func (m *TopologyEntitiesVlanifgroupVlanWrapper) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopologyEntitiesVlanifgroupVlanWrapper) contextValidateVlan(ctx context.Context, formats strfmt.Registry) error {

	if m.Vlan != nil {
		if err := m.Vlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TopologyEntitiesVlanifgroupVlanWrapper) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopologyEntitiesVlanifgroupVlanWrapper) UnmarshalBinary(b []byte) error {
	var res TopologyEntitiesVlanifgroupVlanWrapper
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
