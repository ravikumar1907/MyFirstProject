// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TopologyEntitiesIpv4ifgroupIPV4 topology entities ipv4ifgroup Ipv4
//
// swagger:model topology.entities.ipv4ifgroup.Ipv4
type TopologyEntitiesIpv4ifgroupIPV4 struct {

	// Quality of service.
	ToS *string `json:"ToS,omitempty"`

	// address
	Address *TopologyEntitiesIPV4PatternGroup `json:"address,omitempty"`

	// gateway address
	GatewayAddress *TopologyEntitiesIPV4PatternGroup `json:"gateway-address,omitempty"`

	// UUID.
	ID string `json:"id,omitempty"`

	// prefix
	Prefix *int32 `json:"prefix,omitempty"`
}

// Validate validates this topology entities ipv4ifgroup Ipv4
func (m *TopologyEntitiesIpv4ifgroupIPV4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopologyEntitiesIpv4ifgroupIPV4) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *TopologyEntitiesIpv4ifgroupIPV4) validateGatewayAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.GatewayAddress) { // not required
		return nil
	}

	if m.GatewayAddress != nil {
		if err := m.GatewayAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway-address")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this topology entities ipv4ifgroup Ipv4 based on the context it is used
func (m *TopologyEntitiesIpv4ifgroupIPV4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGatewayAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopologyEntitiesIpv4ifgroupIPV4) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {
		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *TopologyEntitiesIpv4ifgroupIPV4) contextValidateGatewayAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.GatewayAddress != nil {
		if err := m.GatewayAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway-address")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TopologyEntitiesIpv4ifgroupIPV4) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopologyEntitiesIpv4ifgroupIPV4) UnmarshalBinary(b []byte) error {
	var res TopologyEntitiesIpv4ifgroupIPV4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
