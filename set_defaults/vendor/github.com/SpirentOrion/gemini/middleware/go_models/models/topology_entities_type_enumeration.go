// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TopologyEntitiesTypeEnumeration topology entities type enumeration
//
// swagger:model topology.entities.TypeEnumeration
type TopologyEntitiesTypeEnumeration string

const (

	// TopologyEntitiesTypeEnumerationPORT captures enum value "PORT"
	TopologyEntitiesTypeEnumerationPORT TopologyEntitiesTypeEnumeration = "PORT"

	// TopologyEntitiesTypeEnumerationDEVICE captures enum value "DEVICE"
	TopologyEntitiesTypeEnumerationDEVICE TopologyEntitiesTypeEnumeration = "DEVICE"
)

// for schema
var topologyEntitiesTypeEnumerationEnum []interface{}

func init() {
	var res []TopologyEntitiesTypeEnumeration
	if err := json.Unmarshal([]byte(`["PORT","DEVICE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		topologyEntitiesTypeEnumerationEnum = append(topologyEntitiesTypeEnumerationEnum, v)
	}
}

func (m TopologyEntitiesTypeEnumeration) validateTopologyEntitiesTypeEnumerationEnum(path, location string, value TopologyEntitiesTypeEnumeration) error {
	if err := validate.EnumCase(path, location, value, topologyEntitiesTypeEnumerationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this topology entities type enumeration
func (m TopologyEntitiesTypeEnumeration) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTopologyEntitiesTypeEnumerationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this topology entities type enumeration based on context it is used
func (m TopologyEntitiesTypeEnumeration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
