// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TopologyNetworkdevice topology networkdevice
//
// swagger:model topology.Networkdevice
type TopologyNetworkdevice struct {
	TopologyEntitiesEthernetIfGroup

	TopologyEntitiesIPV4IfGroup

	TopologyEntitiesIPV6IfGroup

	TopologyEntitiesVlanIfList

	// The device/host count per port.
	CountPerEndpoint int64 `json:"count-per-endpoint,omitempty"`

	// Id of the network device.
	ID string `json:"id,omitempty"`

	// This field captures UI related metadata as an decoded string.
	//          Backend echos back the values as is.
	UIDescriptor string `json:"ui-descriptor,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TopologyNetworkdevice) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TopologyEntitiesEthernetIfGroup
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TopologyEntitiesEthernetIfGroup = aO0

	// AO1
	var aO1 TopologyEntitiesIPV4IfGroup
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.TopologyEntitiesIPV4IfGroup = aO1

	// AO2
	var aO2 TopologyEntitiesIPV6IfGroup
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.TopologyEntitiesIPV6IfGroup = aO2

	// AO3
	var aO3 TopologyEntitiesVlanIfList
	if err := swag.ReadJSON(raw, &aO3); err != nil {
		return err
	}
	m.TopologyEntitiesVlanIfList = aO3

	// AO4
	var dataAO4 struct {
		CountPerEndpoint int64 `json:"count-per-endpoint,omitempty"`

		ID string `json:"id,omitempty"`

		UIDescriptor string `json:"ui-descriptor,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO4); err != nil {
		return err
	}

	m.CountPerEndpoint = dataAO4.CountPerEndpoint

	m.ID = dataAO4.ID

	m.UIDescriptor = dataAO4.UIDescriptor

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TopologyNetworkdevice) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 5)

	aO0, err := swag.WriteJSON(m.TopologyEntitiesEthernetIfGroup)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.TopologyEntitiesIPV4IfGroup)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.TopologyEntitiesIPV6IfGroup)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)

	aO3, err := swag.WriteJSON(m.TopologyEntitiesVlanIfList)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO3)
	var dataAO4 struct {
		CountPerEndpoint int64 `json:"count-per-endpoint,omitempty"`

		ID string `json:"id,omitempty"`

		UIDescriptor string `json:"ui-descriptor,omitempty"`
	}

	dataAO4.CountPerEndpoint = m.CountPerEndpoint

	dataAO4.ID = m.ID

	dataAO4.UIDescriptor = m.UIDescriptor

	jsonDataAO4, errAO4 := swag.WriteJSON(dataAO4)
	if errAO4 != nil {
		return nil, errAO4
	}
	_parts = append(_parts, jsonDataAO4)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this topology networkdevice
func (m *TopologyNetworkdevice) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TopologyEntitiesEthernetIfGroup
	if err := m.TopologyEntitiesEthernetIfGroup.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TopologyEntitiesIPV4IfGroup
	if err := m.TopologyEntitiesIPV4IfGroup.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TopologyEntitiesIPV6IfGroup
	if err := m.TopologyEntitiesIPV6IfGroup.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TopologyEntitiesVlanIfList
	if err := m.TopologyEntitiesVlanIfList.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this topology networkdevice based on the context it is used
func (m *TopologyNetworkdevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TopologyEntitiesEthernetIfGroup
	if err := m.TopologyEntitiesEthernetIfGroup.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TopologyEntitiesIPV4IfGroup
	if err := m.TopologyEntitiesIPV4IfGroup.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TopologyEntitiesIPV6IfGroup
	if err := m.TopologyEntitiesIPV6IfGroup.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TopologyEntitiesVlanIfList
	if err := m.TopologyEntitiesVlanIfList.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *TopologyNetworkdevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopologyNetworkdevice) UnmarshalBinary(b []byte) error {
	var res TopologyNetworkdevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
