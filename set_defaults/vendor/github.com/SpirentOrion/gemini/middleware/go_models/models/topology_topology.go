// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TopologyTopology topology topology
//
// swagger:model topology.Topology
type TopologyTopology struct {
	TestEndpointEndpointInuseGroup

	// uuid
	ID string `json:"id,omitempty"`

	// Topology name
	Name string `json:"name,omitempty"`

	// spirent hosts
	SpirentHosts []*TopologyNetworkdevice `json:"spirent-hosts"`

	// Type of topology
	TopologyType TopologyTopologyTypeEnumeration `json:"topology-type,omitempty"`

	// This field captures UI related metadata as an decoded string.
	//          Backend echos back the values as is.
	UIDescriptor string `json:"ui-descriptor,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TopologyTopology) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TestEndpointEndpointInuseGroup
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TestEndpointEndpointInuseGroup = aO0

	// AO1
	var dataAO1 struct {
		ID string `json:"id,omitempty"`

		Name string `json:"name,omitempty"`

		SpirentHosts []*TopologyNetworkdevice `json:"spirent-hosts"`

		TopologyType TopologyTopologyTypeEnumeration `json:"topology-type,omitempty"`

		UIDescriptor string `json:"ui-descriptor,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ID = dataAO1.ID

	m.Name = dataAO1.Name

	m.SpirentHosts = dataAO1.SpirentHosts

	m.TopologyType = dataAO1.TopologyType

	m.UIDescriptor = dataAO1.UIDescriptor

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TopologyTopology) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.TestEndpointEndpointInuseGroup)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ID string `json:"id,omitempty"`

		Name string `json:"name,omitempty"`

		SpirentHosts []*TopologyNetworkdevice `json:"spirent-hosts"`

		TopologyType TopologyTopologyTypeEnumeration `json:"topology-type,omitempty"`

		UIDescriptor string `json:"ui-descriptor,omitempty"`
	}

	dataAO1.ID = m.ID

	dataAO1.Name = m.Name

	dataAO1.SpirentHosts = m.SpirentHosts

	dataAO1.TopologyType = m.TopologyType

	dataAO1.UIDescriptor = m.UIDescriptor

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this topology topology
func (m *TopologyTopology) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TestEndpointEndpointInuseGroup
	if err := m.TestEndpointEndpointInuseGroup.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpirentHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopologyType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopologyTopology) validateSpirentHosts(formats strfmt.Registry) error {

	if swag.IsZero(m.SpirentHosts) { // not required
		return nil
	}

	for i := 0; i < len(m.SpirentHosts); i++ {
		if swag.IsZero(m.SpirentHosts[i]) { // not required
			continue
		}

		if m.SpirentHosts[i] != nil {
			if err := m.SpirentHosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("spirent-hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TopologyTopology) validateTopologyType(formats strfmt.Registry) error {

	if swag.IsZero(m.TopologyType) { // not required
		return nil
	}

	if err := m.TopologyType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("topology-type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this topology topology based on the context it is used
func (m *TopologyTopology) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TestEndpointEndpointInuseGroup
	if err := m.TestEndpointEndpointInuseGroup.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpirentHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTopologyType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopologyTopology) contextValidateSpirentHosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SpirentHosts); i++ {

		if m.SpirentHosts[i] != nil {
			if err := m.SpirentHosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("spirent-hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TopologyTopology) contextValidateTopologyType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TopologyType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("topology-type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TopologyTopology) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopologyTopology) UnmarshalBinary(b []byte) error {
	var res TopologyTopology
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
