// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TopologyEntitiesPatternType topology entities pattern type
//
// swagger:model topology.entities.PatternType
type TopologyEntitiesPatternType string

const (

	// TopologyEntitiesPatternTypeSINGLE captures enum value "SINGLE"
	TopologyEntitiesPatternTypeSINGLE TopologyEntitiesPatternType = "SINGLE"

	// TopologyEntitiesPatternTypeCOUNTER captures enum value "COUNTER"
	TopologyEntitiesPatternTypeCOUNTER TopologyEntitiesPatternType = "COUNTER"

	// TopologyEntitiesPatternTypeLIST captures enum value "LIST"
	TopologyEntitiesPatternTypeLIST TopologyEntitiesPatternType = "LIST"
)

// for schema
var topologyEntitiesPatternTypeEnum []interface{}

func init() {
	var res []TopologyEntitiesPatternType
	if err := json.Unmarshal([]byte(`["SINGLE","COUNTER","LIST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		topologyEntitiesPatternTypeEnum = append(topologyEntitiesPatternTypeEnum, v)
	}
}

func (m TopologyEntitiesPatternType) validateTopologyEntitiesPatternTypeEnum(path, location string, value TopologyEntitiesPatternType) error {
	if err := validate.EnumCase(path, location, value, topologyEntitiesPatternTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this topology entities pattern type
func (m TopologyEntitiesPatternType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTopologyEntitiesPatternTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this topology entities pattern type based on context it is used
func (m TopologyEntitiesPatternType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
