// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TopologyTopologyTypeEnumeration topology topology type enumeration
//
// swagger:model topology.TopologyTypeEnumeration
type TopologyTopologyTypeEnumeration string

const (

	// TopologyTopologyTypeEnumerationT1 captures enum value "T1"
	TopologyTopologyTypeEnumerationT1 TopologyTopologyTypeEnumeration = "T1"

	// TopologyTopologyTypeEnumerationT2 captures enum value "T2"
	TopologyTopologyTypeEnumerationT2 TopologyTopologyTypeEnumeration = "T2"
)

// for schema
var topologyTopologyTypeEnumerationEnum []interface{}

func init() {
	var res []TopologyTopologyTypeEnumeration
	if err := json.Unmarshal([]byte(`["T1","T2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		topologyTopologyTypeEnumerationEnum = append(topologyTopologyTypeEnumerationEnum, v)
	}
}

func (m TopologyTopologyTypeEnumeration) validateTopologyTopologyTypeEnumerationEnum(path, location string, value TopologyTopologyTypeEnumeration) error {
	if err := validate.EnumCase(path, location, value, topologyTopologyTypeEnumerationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this topology topology type enumeration
func (m TopologyTopologyTypeEnumeration) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTopologyTopologyTypeEnumerationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this topology topology type enumeration based on context it is used
func (m TopologyTopologyTypeEnumeration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
